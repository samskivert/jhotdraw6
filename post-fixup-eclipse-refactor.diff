diff --git a/src/main/java/org/jhotdraw/contrib/CompositeFigureCreationTool.java b/src/main/java/org/jhotdraw/contrib/CompositeFigureCreationTool.java
index 4391a1f..560cd8c 100644
--- a/src/main/java/org/jhotdraw/contrib/CompositeFigureCreationTool.java
+++ b/src/main/java/org/jhotdraw/contrib/CompositeFigureCreationTool.java
@@ -52,7 +52,7 @@ public class CompositeFigureCreationTool extends CreationTool {
 	}
 
 	public void mouseMove(MouseEvent e, int x, int y) {
-		if ((getContainerFigure() != null) && !getContainerFigure().containsPoint(e.getX(), e.getY())) {
+		if ((getContainerFigure() != null) && !getContainerFigure().containsPoint(new java.awt.Point(x, y))) {
 			// here you might want to constrain the mouse movements to the size of the
 			// container figure: not sure whether this works...
 			toolDone();
diff --git a/src/main/java/org/jhotdraw/contrib/DiamondFigure.java b/src/main/java/org/jhotdraw/contrib/DiamondFigure.java
index b7f27eb..566f0ab 100644
--- a/src/main/java/org/jhotdraw/contrib/DiamondFigure.java
+++ b/src/main/java/org/jhotdraw/contrib/DiamondFigure.java
@@ -57,8 +57,8 @@ public  class DiamondFigure extends RectangleFigure {
 		return new Insets(r.height/2, r.width/2, r.height/2, r.width/2);
 	}
 
-	public boolean containsPoint(int x, int y) {
-		return getPolygon().contains(x, y);
+	public boolean containsPoint(Point point) {
+		return getPolygon().contains(point.x, point.y);
 	}
 
 	public Point chop(Point p) {
diff --git a/src/main/java/org/jhotdraw/contrib/NestedCreationTool.java b/src/main/java/org/jhotdraw/contrib/NestedCreationTool.java
index 5df62d4..b1d319b 100644
--- a/src/main/java/org/jhotdraw/contrib/NestedCreationTool.java
+++ b/src/main/java/org/jhotdraw/contrib/NestedCreationTool.java
@@ -47,7 +47,7 @@ public class NestedCreationTool extends CreationTool {
 	}
 
 	public void mouseMove(MouseEvent e, int x, int y) {
-		if ((getContainerFigure() != null) && !getContainerFigure().containsPoint(e.getX(), e.getY())) {
+		if ((getContainerFigure() != null) && !getContainerFigure().containsPoint(new java.awt.Point(x, y))) {
 			// here you might want to constrain the mouse movements to the size of the
 			// container figure: not sure whether this works...
 			toolDone();
@@ -59,7 +59,7 @@ public class NestedCreationTool extends CreationTool {
 
 	public void mouseUp(MouseEvent e, int x, int y) {
 		if ((getContainerFigure() != null) && (getCreatedFigure() != null)
-				&& getContainerFigure().containsPoint(e.getX(), e.getY())) {
+				&& getContainerFigure().containsPoint(new java.awt.Point(x, y))) {
 			getContainerFigure().add(getCreatedFigure());
 		}
 		toolDone();
diff --git a/src/main/java/org/jhotdraw/contrib/PolygonFigure.java b/src/main/java/org/jhotdraw/contrib/PolygonFigure.java
index 68cf7d6..198c88f 100644
--- a/src/main/java/org/jhotdraw/contrib/PolygonFigure.java
+++ b/src/main/java/org/jhotdraw/contrib/PolygonFigure.java
@@ -130,8 +130,8 @@ public  class PolygonFigure extends AttributeFigure {
 		g.drawPolygon(getInternalPolygon());
 	}
 
-	public boolean containsPoint(int x, int y) {
-		return getInternalPolygon().contains(x, y);
+	public boolean containsPoint(Point point) {
+		return getInternalPolygon().contains(point.x, point.y);
 	}
 
 	public Connector connectorAt(int x, int y) {
diff --git a/src/main/java/org/jhotdraw/contrib/TriangleFigure.java b/src/main/java/org/jhotdraw/contrib/TriangleFigure.java
index 2a40e59..3a9079c 100644
--- a/src/main/java/org/jhotdraw/contrib/TriangleFigure.java
+++ b/src/main/java/org/jhotdraw/contrib/TriangleFigure.java
@@ -149,8 +149,8 @@ public  class TriangleFigure extends RectangleFigure {
 		}
 	}
 
-	public boolean containsPoint(int x, int y) {
-		return getPolygon().contains(x, y);
+	public boolean containsPoint(Point point) {
+		return getPolygon().contains(point.x, point.y);
 	}
 
 	public Point center() {
diff --git a/src/main/java/org/jhotdraw/contrib/dnd/DragNDropTool.java b/src/main/java/org/jhotdraw/contrib/dnd/DragNDropTool.java
index ec12aea..08cd6c1 100644
--- a/src/main/java/org/jhotdraw/contrib/dnd/DragNDropTool.java
+++ b/src/main/java/org/jhotdraw/contrib/dnd/DragNDropTool.java
@@ -292,7 +292,7 @@ public class DragNDropTool extends AbstractTool {
 		//				System.out.println("origin at " + p);
 					while (selectedElements.hasNextFigure()) {
 						Figure f = selectedElements.nextFigure();
-						if (f.containsPoint(p.x, p.y)) {
+						if (f.containsPoint(new java.awt.Point(p.x, p.y))) {
 		/*              Rectangle r = figgy.displayBox();
 							sx = r.width;
 							sy = r.height;*/
diff --git a/src/main/java/org/jhotdraw/contrib/html/HTMLTextAreaFigure.java b/src/main/java/org/jhotdraw/contrib/html/HTMLTextAreaFigure.java
index ef7a06e..0e5fdc8 100644
--- a/src/main/java/org/jhotdraw/contrib/html/HTMLTextAreaFigure.java
+++ b/src/main/java/org/jhotdraw/contrib/html/HTMLTextAreaFigure.java
@@ -233,12 +233,10 @@ public class HTMLTextAreaFigure extends TextAreaFigure
 	/**
 	 * True if the figure contains the point. The call is relayed to the frame figure
 	 *
-	 * @param x  Description of the Parameter
-	 * @param y  Description of the Parameter
 	 * @return   Description of the Return Value
 	 */
-	public boolean containsPoint(int x, int y) {
-		return getFrameFigure().containsPoint(x, y);
+	public boolean containsPoint(Point point) {
+		return getFrameFigure().containsPoint(new java.awt.Point(point.x, point.y));
 	}
 
 	/**
diff --git a/src/main/java/org/jhotdraw/figures/PolyLineFigure.java b/src/main/java/org/jhotdraw/figures/PolyLineFigure.java
index 8504f4b..d056df1 100644
--- a/src/main/java/org/jhotdraw/figures/PolyLineFigure.java
+++ b/src/main/java/org/jhotdraw/figures/PolyLineFigure.java
@@ -232,17 +232,17 @@ public  class PolyLineFigure extends AbstractFigure {
 		g.drawLine(x1, y1, x2, y2);
 	}
 
-	public boolean containsPoint(int x, int y) {
+	public boolean containsPoint(Point point) {
 		Rectangle bounds = displayBox();
 		bounds.grow(4,4);
-		if (!bounds.contains(x, y)) {
+		if (!bounds.contains(point.x, point.y)) {
 			return false;
 		}
 
 		for (int i = 0; i < fPoints.size()-1; i++) {
 			Point p1 = pointAt(i);
 			Point p2 = pointAt(i+1);
-			if (Geom.lineContainsPoint(p1.x, p1.y, p2.x, p2.y, x, y)) {
+			if (Geom.lineContainsPoint(p1.x, p1.y, p2.x, p2.y, point.x, point.y)) {
 				return true;
 			}
 		}
diff --git a/src/main/java/org/jhotdraw/framework/Figure.java b/src/main/java/org/jhotdraw/framework/Figure.java
index 8ab829f..29163dc 100644
--- a/src/main/java/org/jhotdraw/framework/Figure.java
+++ b/src/main/java/org/jhotdraw/framework/Figure.java
@@ -126,8 +126,9 @@ public interface Figure
 
 	/**
 	 * Checks if a point is inside the figure.
+	 * @param point TODO
 	 */
-	public boolean containsPoint(int x, int y);
+	public boolean containsPoint(Point point);
 
 	/**
 	 * Returns a Clone of this figure
diff --git a/src/main/java/org/jhotdraw/samples/net/NodeFigure.java b/src/main/java/org/jhotdraw/samples/net/NodeFigure.java
index c54d8c0..900c281 100644
--- a/src/main/java/org/jhotdraw/samples/net/NodeFigure.java
+++ b/src/main/java/org/jhotdraw/samples/net/NodeFigure.java
@@ -40,15 +40,15 @@ public class NodeFigure extends TextFigure {
 		return box;
 	}
 
-	public boolean containsPoint(int x, int y) {
+	public boolean containsPoint(Point point) {
 		// add slop for connectors
 		if (fConnectorsVisible) {
 			Rectangle r = displayBox();
 			int d = LocatorConnector.SIZE/2;
 			r.grow(d, d);
-			return r.contains(x, y);
+			return r.contains(point.x, point.y);
 		}
-		return super.containsPoint(x, y);
+		return super.containsPoint(point);
 	}
 
 	private void drawBorder(Graphics g) {
diff --git a/src/main/java/org/jhotdraw/samples/offsetConnectors/NodeFigure.java b/src/main/java/org/jhotdraw/samples/offsetConnectors/NodeFigure.java
index 5e9cb86..0c0de2c 100644
--- a/src/main/java/org/jhotdraw/samples/offsetConnectors/NodeFigure.java
+++ b/src/main/java/org/jhotdraw/samples/offsetConnectors/NodeFigure.java
@@ -49,15 +49,15 @@ public class NodeFigure extends TextFigure {
 		return box;
 	}
 
-	public boolean containsPoint(int x, int y) {
+	public boolean containsPoint(Point point) {
 		// add slop for connectors
 		if (fConnectorsVisible) {
 			Rectangle r = displayBox();
 			int d = LocatorConnector.SIZE / 2;
 			r.grow(d, d);
-			return r.contains(x, y);
+			return r.contains(point.x, point.y);
 		}
-		return super.containsPoint(x, y);
+		return super.containsPoint(point);
 	}
 
 	private void drawBorder(Graphics g) {
diff --git a/src/main/java/org/jhotdraw/standard/AbstractConnector.java b/src/main/java/org/jhotdraw/standard/AbstractConnector.java
index 990303a..35fae0d 100644
--- a/src/main/java/org/jhotdraw/standard/AbstractConnector.java
+++ b/src/main/java/org/jhotdraw/standard/AbstractConnector.java
@@ -90,7 +90,7 @@ public abstract class AbstractConnector implements Connector {
 	 * Tests if a point is contained in the connector.
 	 */
 	public boolean containsPoint(int x, int y) {
-		return owner().containsPoint(x, y);
+		return owner().containsPoint(new java.awt.Point(x, y));
 	}
 
 	/**
diff --git a/src/main/java/org/jhotdraw/standard/AbstractFigure.java b/src/main/java/org/jhotdraw/standard/AbstractFigure.java
index ffc1d91..440bfb7 100644
--- a/src/main/java/org/jhotdraw/standard/AbstractFigure.java
+++ b/src/main/java/org/jhotdraw/standard/AbstractFigure.java
@@ -146,7 +146,7 @@ public abstract class AbstractFigure implements Figure {
 	 * @see #containsPoint
 	 */
 	public Figure findFigureInside(int x, int y) {
-		if (containsPoint(x, y)) {
+		if (containsPoint(new java.awt.Point(x, y))) {
 			return this;
 		}
 		return null;
@@ -155,8 +155,8 @@ public abstract class AbstractFigure implements Figure {
 	/**
 	 * Checks if a point is inside the figure.
 	 */
-	public boolean containsPoint(int x, int y) {
-		return displayBox().contains(x, y);
+	public boolean containsPoint(Point point) {
+		return displayBox().contains(point.x, point.y);
 	}
 
 	/**
diff --git a/src/main/java/org/jhotdraw/standard/ChangeConnectionHandle.java b/src/main/java/org/jhotdraw/standard/ChangeConnectionHandle.java
index f369863..7493430 100644
--- a/src/main/java/org/jhotdraw/standard/ChangeConnectionHandle.java
+++ b/src/main/java/org/jhotdraw/standard/ChangeConnectionHandle.java
@@ -212,7 +212,7 @@ public abstract class ChangeConnectionHandle extends AbstractHandle {
 		while (fe.hasNextFigure()) {
 			Figure figure = fe.nextFigure();
 			if (!figure.includes(getConnection()) && figure.canConnect()) {
-				if (figure.containsPoint(x, y)) {
+				if (figure.containsPoint(new java.awt.Point(x, y))) {
 					return figure;
 				}
 			}
diff --git a/src/main/java/org/jhotdraw/standard/CompositeFigure.java b/src/main/java/org/jhotdraw/standard/CompositeFigure.java
index b0ca530..c1984d8 100644
--- a/src/main/java/org/jhotdraw/standard/CompositeFigure.java
+++ b/src/main/java/org/jhotdraw/standard/CompositeFigure.java
@@ -435,7 +435,7 @@ public abstract class CompositeFigure
 		FigureEnumeration fe = figuresReverse();
 		while (fe.hasNextFigure()) {
 			Figure figure = fe.nextFigure();
-			if (figure.containsPoint(x, y)) {
+			if (figure.containsPoint(new java.awt.Point(x, y))) {
 				return figure;
 			}
 		}
@@ -474,7 +474,7 @@ public abstract class CompositeFigure
 		FigureEnumeration fe = figuresReverse();
 		while (fe.hasNextFigure()) {
 			Figure figure = fe.nextFigure();
-			if (figure.containsPoint(x, y) && !figure.includes(without)) {
+			if (figure.containsPoint(new java.awt.Point(x, y)) && !figure.includes(without)) {
 				return figure;
 			}
 		}
@@ -519,7 +519,7 @@ public abstract class CompositeFigure
 		}
 
 		// bug-fix: 661878
-		if (containsPoint(x, y)) {
+		if (containsPoint(new java.awt.Point(x, y))) {
 			return this;
 		}
 		else {
@@ -549,7 +549,7 @@ public abstract class CompositeFigure
 			}
 		}
 
-		if (containsPoint(x, y)) {
+		if (containsPoint(new java.awt.Point(x, y))) {
 			return this;
 		}
 		else {
diff --git a/src/main/java/org/jhotdraw/standard/ConnectionHandle.java b/src/main/java/org/jhotdraw/standard/ConnectionHandle.java
index 43c4ea5..38f97c2 100644
--- a/src/main/java/org/jhotdraw/standard/ConnectionHandle.java
+++ b/src/main/java/org/jhotdraw/standard/ConnectionHandle.java
@@ -170,7 +170,7 @@ public  class ConnectionHandle extends LocatorHandle {
 		while (fe.hasNextFigure()) {
 			Figure figure = fe.nextFigure();
 			if (!figure.includes(getConnection()) && figure.canConnect() 
-				&& figure.containsPoint(x, y)) {
+				&& figure.containsPoint(new java.awt.Point(x, y))) {
 				return figure;
 			}
 		}
diff --git a/src/main/java/org/jhotdraw/standard/ConnectionTool.java b/src/main/java/org/jhotdraw/standard/ConnectionTool.java
index 90f1cb2..079ad4e 100644
--- a/src/main/java/org/jhotdraw/standard/ConnectionTool.java
+++ b/src/main/java/org/jhotdraw/standard/ConnectionTool.java
@@ -328,7 +328,7 @@ public  class ConnectionTool extends AbstractTool {
 		while (fe.hasNextFigure()) {
 			Figure figure = fe.nextFigure();
 			if (!figure.includes(getConnection()) && figure.canConnect()
-				&& figure.containsPoint(x, y)) {
+				&& figure.containsPoint(new java.awt.Point(x, y))) {
 				return figure;
 			}
 		}
diff --git a/src/main/java/org/jhotdraw/standard/DecoratorFigure.java b/src/main/java/org/jhotdraw/standard/DecoratorFigure.java
index 3798e17..fc39bd6 100644
--- a/src/main/java/org/jhotdraw/standard/DecoratorFigure.java
+++ b/src/main/java/org/jhotdraw/standard/DecoratorFigure.java
@@ -84,8 +84,8 @@ public abstract class DecoratorFigure
 	/**
 	 * Forwards containsPoint to its contained figure.
 	 */
-	public boolean containsPoint(int x, int y) {
-		return getDecoratedFigure().containsPoint(x, y);
+	public boolean containsPoint(Point point) {
+		return getDecoratedFigure().containsPoint(new java.awt.Point(point.x, point.y));
 	}
 
 	/**
diff --git a/src/test/java/org/jhotdraw/test/contrib/DiamondFigureTest.java b/src/test/java/org/jhotdraw/test/contrib/DiamondFigureTest.java
index 9684e25..8ab3bf5 100644
--- a/src/test/java/org/jhotdraw/test/contrib/DiamondFigureTest.java
+++ b/src/test/java/org/jhotdraw/test/contrib/DiamondFigureTest.java
@@ -10,6 +10,8 @@
  */
 package org.jhotdraw.test.contrib;
 
+import java.awt.Point;
+
 import org.jhotdraw.contrib.DiamondFigure;
 import junit.framework.TestCase;
 // JUnitDoclet begin import
@@ -109,7 +111,7 @@ extends TestCase
 	// JUnitDoclet begin javadoc_method containsPoint()
 	/**
 	 * Method testContainsPoint is testing containsPoint
-	 * @see org.jhotdraw.contrib.DiamondFigure#containsPoint(int, int)
+	 * @see org.jhotdraw.contrib.DiamondFigure#containsPoint(Point)
 	 */
 	// JUnitDoclet end javadoc_method containsPoint()
 	public void testContainsPoint() throws Exception {
diff --git a/src/test/java/org/jhotdraw/test/contrib/PolygonFigureTest.java b/src/test/java/org/jhotdraw/test/contrib/PolygonFigureTest.java
index 8b35c76..c130dfc 100644
--- a/src/test/java/org/jhotdraw/test/contrib/PolygonFigureTest.java
+++ b/src/test/java/org/jhotdraw/test/contrib/PolygonFigureTest.java
@@ -10,6 +10,8 @@
  */
 package org.jhotdraw.test.contrib;
 
+import java.awt.Point;
+
 import org.jhotdraw.contrib.PolygonFigure;
 import junit.framework.TestCase;
 // JUnitDoclet begin import
@@ -219,7 +221,7 @@ extends TestCase
 	// JUnitDoclet begin javadoc_method containsPoint()
 	/**
 	 * Method testContainsPoint is testing containsPoint
-	 * @see org.jhotdraw.contrib.PolygonFigure#containsPoint(int, int)
+	 * @see org.jhotdraw.contrib.PolygonFigure#containsPoint(Point)
 	 */
 	// JUnitDoclet end javadoc_method containsPoint()
 	public void testContainsPoint() throws Exception {
diff --git a/src/test/java/org/jhotdraw/test/contrib/TriangleFigureTest.java b/src/test/java/org/jhotdraw/test/contrib/TriangleFigureTest.java
index beaf076..234f552 100644
--- a/src/test/java/org/jhotdraw/test/contrib/TriangleFigureTest.java
+++ b/src/test/java/org/jhotdraw/test/contrib/TriangleFigureTest.java
@@ -144,22 +144,22 @@ extends TestCase
 	// JUnitDoclet begin javadoc_method containsPoint()
 	/**
 	 * Method testContainsPoint is testing containsPoint
-	 * @see org.jhotdraw.contrib.TriangleFigure#containsPoint(int, int)
+	 * @see org.jhotdraw.contrib.TriangleFigure#containsPoint(Point)
 	 */
 	// JUnitDoclet end javadoc_method containsPoint()
 	public void testContainsPoint() throws Exception {
 		// JUnitDoclet begin method containsPoint
         for (int yy = 0; yy <= 10; yy++) {
             for (int xx = 0; xx <= 10; xx++) {
-                assertEquals(CONTAINS_SAMPLES[yy][xx], trianglefigure.containsPoint(xx, yy));
+                assertEquals(CONTAINS_SAMPLES[yy][xx], trianglefigure.containsPoint(new java.awt.Point(xx, yy)));
             }
         }
         // also try some definitely out of bounds points
-        assertFalse(trianglefigure.containsPoint(10, 15));
-        assertFalse(trianglefigure.containsPoint(15, 15));
-        assertFalse(trianglefigure.containsPoint(15, 10));
-        assertFalse(trianglefigure.containsPoint(-15, -15));
-        assertFalse(trianglefigure.containsPoint(-1, -1));
+        assertFalse(trianglefigure.containsPoint(new java.awt.Point(10, 15)));
+        assertFalse(trianglefigure.containsPoint(new java.awt.Point(15, 15)));
+        assertFalse(trianglefigure.containsPoint(new java.awt.Point(15, 10)));
+        assertFalse(trianglefigure.containsPoint(new java.awt.Point(-15, -15)));
+        assertFalse(trianglefigure.containsPoint(new java.awt.Point(-1, -1)));
 		// JUnitDoclet end method containsPoint
 	}
 
diff --git a/src/test/java/org/jhotdraw/test/figures/PolyLineFigureTest.java b/src/test/java/org/jhotdraw/test/figures/PolyLineFigureTest.java
index bc6bc08..824d746 100644
--- a/src/test/java/org/jhotdraw/test/figures/PolyLineFigureTest.java
+++ b/src/test/java/org/jhotdraw/test/figures/PolyLineFigureTest.java
@@ -10,6 +10,8 @@
  */
 package org.jhotdraw.test.figures;
 
+import java.awt.Point;
+
 import junit.framework.TestCase;
 // JUnitDoclet begin import
 import org.jhotdraw.figures.ArrowTip;
@@ -293,7 +295,7 @@ extends TestCase
 	// JUnitDoclet begin javadoc_method containsPoint()
 	/**
 	 * Method testContainsPoint is testing containsPoint
-	 * @see org.jhotdraw.figures.PolyLineFigure#containsPoint(int, int)
+	 * @see org.jhotdraw.figures.PolyLineFigure#containsPoint(Point)
 	 */
 	// JUnitDoclet end javadoc_method containsPoint()
 	public void testContainsPoint() throws Exception {
diff --git a/src/test/java/org/jhotdraw/test/samples/net/NodeFigureTest.java b/src/test/java/org/jhotdraw/test/samples/net/NodeFigureTest.java
index 6a3224b..ec38f03 100644
--- a/src/test/java/org/jhotdraw/test/samples/net/NodeFigureTest.java
+++ b/src/test/java/org/jhotdraw/test/samples/net/NodeFigureTest.java
@@ -10,6 +10,8 @@
  */
 package org.jhotdraw.test.samples.net;
 
+import java.awt.Point;
+
 import org.jhotdraw.samples.net.NodeFigure;
 import junit.framework.TestCase;
 // JUnitDoclet begin import
@@ -98,7 +100,7 @@ extends TestCase
 	// JUnitDoclet begin javadoc_method containsPoint()
 	/**
 	 * Method testContainsPoint is testing containsPoint
-	 * @see org.jhotdraw.samples.net.NodeFigure#containsPoint(int, int)
+	 * @see org.jhotdraw.samples.net.NodeFigure#containsPoint(Point)
 	 */
 	// JUnitDoclet end javadoc_method containsPoint()
 	public void testContainsPoint() throws Exception {
